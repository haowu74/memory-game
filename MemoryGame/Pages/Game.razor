@page "/"
@page "/index"
@inject IJSRuntime JSRuntime

@using MemoryGame.Models

<PageTitle>Memory Game</PageTitle>

<h1>Memory Game</h1>

<h3>Level:</h3>
<select @bind="@Level">
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
  <option value="4">4</option>
</select>

<h3>Type:</h3>
<select @bind="@CardType">
  <option value="Decimal">0-10</option>
  <option value="Hexadecimal">0-15</option>
  <option value="Alphabet">A-Z</option>
  <option value="Images">Images</option>
</select>

<h3>Size:</h3>
<select @bind="@Size">
  <option value="4">4</option>
  <option value="6">6</option>
  <option value="8">8</option>
  <option value="10">10</option>
</select>

<h3>
  Time: <span>@TimeCounter</span>
</h3>

<div class="board" style="width:@((64 * Size).ToString() + "px");height:@((64 * Size).ToString() + "px")">
  @for (var i = 0; i < Size; i++)
  {
    @for (var j = 0; j < Size; j++)
    {
      int x = i;
      int y = j;
      var card = gm.Cards.ElementAt(x * Size + y);
      <div class="flip-card">
        <div class="flip-card-inner" style=@(card.Revealed ? "transform: rotateY(180deg)" : "transform: rotateY(0deg)")>
          <div class="card-front" id="card-front-@(x)-@(y)" style="background-color:@(card.Matched ? "gold" : "gray")">@card.Text</div>
          <div class="card-back" id="card-back-@(x)-@(y)" @onclick="@(() => CardBackClicked(x, y))"></div>
        </div>
      </div>
    }
  }
</div>

<br />
<button style="display:@(gm.GameOver ? "block" : "none")" @onclick="() => Restart(Level, Size, CardType)">Restart</button>

<br />
<h3>Records:</h3>